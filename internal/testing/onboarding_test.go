package testing

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/storacha/go-libstoracha/capabilities/blob"
	"github.com/storacha/go-libstoracha/capabilities/blob/replica"
	"github.com/storacha/go-libstoracha/capabilities/claim"
	"github.com/storacha/go-libstoracha/capabilities/pdp"
	"github.com/storacha/go-mkdelegation/pkg/delegation"
	ucandelegation "github.com/storacha/go-ucanto/core/delegation"
	"github.com/storacha/go-ucanto/did"
	ed25519 "github.com/storacha/go-ucanto/principal/ed25519/signer"
	"github.com/storacha/go-ucanto/ucan"
	"github.com/stretchr/testify/require"

	"github.com/storacha/delegator/internal/config"
	"github.com/storacha/delegator/internal/server"
	"github.com/storacha/delegator/pkg/client"
)

/*

generated by github.com/storacha/go-mkdelegation
+-----------------+----------------------------------------------------------+-----------------------------------------------------------------------------------------------+
|     SERVICE     |                           DID                            |                                          SECRET KEY                                           |
+-----------------+----------------------------------------------------------+-----------------------------------------------------------------------------------------------+
| Upload Service  | did:key:z6Mktg7STK3Sh2x7F1NVNfctNG55hN7EG6cMhsdCKqFZ5rWz | MgCaXyMJ92cSESJj/9OCgeWSbJwjpimS5XCs1nTmssdT3F+0B005v1rW3SkM377XnoWQdXbnBQnzUzmwPwwUkDBeqaA8= |
+-----------------+----------------------------------------------------------+-----------------------------------------------------------------------------------------------+
| Indexer Service | did:key:z6MkusjYECaNnJ7ZN4QdVBWrNxEnpsJBi5ctRe3R9mmScX1N | MgCaAOjGBTc6frJTpLaeEiiAd6QecEXEHC7+mgxMR/687n+0B5SRUoW4hSicjl7TOfhMPnrem/U5gKzGQ+8E2nha20tU= |
+-----------------+----------------------------------------------------------+-----------------------------------------------------------------------------------------------+
| Storage Node    | did:key:z6MkjApdj1bAgFyvC9AyNEUxZ3hQKXMLLUmG6rEpkPbSypAv | MgCbtqXGKsI6vFakeZ7d7Ps+l5hO11Z1sRZT1J/yH4CrSee0BRhRoqQJm6yTig4cnCjSDlX8YMm9WCq91kD9/DMDHtGs= |
+-----------------+----------------------------------------------------------+-----------------------------------------------------------------------------------------------+


Delegation Path	Base64 Encoded UCAN
---------------	------------------
Indexer â†’ Upload	mAYIEAJYEOqJlcm9vdHOB2CpYJQABcRIg/sBHSr/y5KEcfrTDUqrtiUsSjC53zrPXfqatYAl4qS1ndmVyc2lvbgH/AgFxEiAXkLIixQj9fAUUMxt129F8DhWoxXGHsyi9KF9F+cT4a6dhc1hE7aEDQAWrxRHZXDI6Hc+eKRmBHUAGqoJ3PkprcJDCctLhPy/dsFDhT6q4R4sRz7gzkt84vR8mgKA+lz7aRPWAx5K6LQdhdmUwLjkuMWNhdHSCo2JuYqBjY2FubWFzc2VydC9lcXVhbHNkd2l0aHg4ZGlkOmtleTp6Nk1rdXNqWUVDYU5uSjdaTjRRZFZCV3JOeEVucHNKQmk1Y3RSZTNSOW1tU2NYMU6jYm5ioGNjYW5sYXNzZXJ0L2luZGV4ZHdpdGh4OGRpZDprZXk6ejZNa3VzallFQ2FObko3Wk40UWRWQldyTnhFbnBzSkJpNWN0UmUzUjltbVNjWDFOY2F1ZFgi7QHTTm/WtbdKQzfvteehZB1ducFCfNTObA/DBSQMF6poD2NleHD2Y2lzc1gi7QHlJFShbiFKJyOXtM5+Ew+et6b9TmArMZD7wTaeFrbS1WNwcmaAWQFxEiD+wEdKv/LkoRx+tMNSqu2JSxKMLnfOs9d+pq1gCXipLaFqdWNhbkAwLjkuMdgqWCUAAXESIBeQsiLFCP18BRQzG3Xb0XwOFajFcYezKL0oX0X5xPhr
Indexer â†’ Storage	mAYIEAL8DOqJlcm9vdHOB2CpYJQABcRIgLQfMyaRFKA00x/6k+oLlc2Yt2miBw3sjfBEWFsFO595ndmVyc2lvbgGoAgFxEiCO1CXglFUdnu+RzOYbFqz4xnuSImPe3+lkIIVY5xAq9qdhc1hE7aEDQK+xRnZh79/yMlPmuCoH27HmlQpAhU+je0i2GRkXKOlGoI7l9lDpwNiNCtiU8w3SNWjxYctV4SvteX6TEtCNOAVhdmUwLjkuMWNhdHSBo2JuYqBjY2Fua2NsYWltL2NhY2hlZHdpdGh4OGRpZDprZXk6ejZNa3VzallFQ2FObko3Wk40UWRWQldyTnhFbnBzSkJpNWN0UmUzUjltbVNjWDFOY2F1ZFgi7QFGFGipAmbrJOKDhycKNIOVfxgyb1YKr3WQP38MwMe0a2NleHD2Y2lzc1gi7QHlJFShbiFKJyOXtM5+Ew+et6b9TmArMZD7wTaeFrbS1WNwcmaAWQFxEiAtB8zJpEUoDTTH/qT6guVzZi3aaIHDeyN8ERYWwU7n3qFqdWNhbkAwLjkuMdgqWCUAAXESII7UJeCUVR2e75HM5hsWrPjGe5IiY97f6WQghVjnECr2
Storage â†’ Upload	mAYIEAPMEOqJlcm9vdHOB2CpYJQABcRIgwqQL/b/Bdq6MA1HYTXMec+1RSxHWXh5pS0Op9pi1x2NndmVyc2lvbgHcAwFxEiCvcMwNcG8Aqv2zf5e7Kq7IVLtS993uYYYkP2vX2R+bYadhc1hE7aEDQMVOr4+JX6l1oOFMNAWCE8tFKJaCkxC//iR35d//f7r0SfPL6Or7qmD4/euQV+3SD4T+FUl34OGEiopAqEF+0gJhdmUwLjkuMWNhdHSDo2JuYqBjY2FubWJsb2IvYWxsb2NhdGVkd2l0aHg4ZGlkOmtleTp6Nk1rakFwZGoxYkFnRnl2QzlBeU5FVXhaM2hRS1hNTExVbUc2ckVwa1BiU3lwQXajYm5ioGNjYW5rYmxvYi9hY2NlcHRkd2l0aHg4ZGlkOmtleTp6Nk1rakFwZGoxYkFnRnl2QzlBeU5FVXhaM2hRS1hNTExVbUc2ckVwa1BiU3lwQXajYm5ioGNjYW51YmxvYi9yZXBsaWNhL2FsbG9jYXRlZHdpdGh4OGRpZDprZXk6ejZNa2pBcGRqMWJBZ0Z5dkM5QXlORVV4WjNoUUtYTUxMVW1HNnJFcGtQYlN5cEF2Y2F1ZFgi7QHTTm/WtbdKQzfvteehZB1ducFCfNTObA/DBSQMF6poD2NleHD2Y2lzc1gi7QFGFGipAmbrJOKDhycKNIOVfxgyb1YKr3WQP38MwMe0a2NwcmaAWQFxEiDCpAv9v8F2rowDUdhNcx5z7VFLEdZeHmlLQ6n2mLXHY6FqdWNhbkAwLjkuMdgqWCUAAXESIK9wzA1wbwCq/bN/l7sqrshUu1L33e5hhiQ/a9fZH5th
*/

const (
	IndexingServiceDID = "did:key:z6MkusjYECaNnJ7ZN4QdVBWrNxEnpsJBi5ctRe3R9mmScX1N"
	IndexingServiceKey = "MgCaAOjGBTc6frJTpLaeEiiAd6QecEXEHC7+mgxMR/687n+0B5SRUoW4hSicjl7TOfhMPnrem/U5gKzGQ+8E2nha20tU="

	UploadServiceDID = "did:key:z6Mktg7STK3Sh2x7F1NVNfctNG55hN7EG6cMhsdCKqFZ5rWz"
	UploadServiceKey = "MgCaXyMJ92cSESJj/9OCgeWSbJwjpimS5XCs1nTmssdT3F+0B005v1rW3SkM377XnoWQdXbnBQnzUzmwPwwUkDBeqaA8="

	StorageNodeDID = "did:key:z6MkjApdj1bAgFyvC9AyNEUxZ3hQKXMLLUmG6rEpkPbSypAv"
	StorageNodeKey = "MgCbtqXGKsI6vFakeZ7d7Ps+l5hO11Z1sRZT1J/yH4CrSee0BRhRoqQJm6yTig4cnCjSDlX8YMm9WCq91kD9/DMDHtGs="
)

func TestHappyPath(t *testing.T) {
	ctx, cancel := context.WithCancel(context.Background())
	svr := setupServer(t)
	go func() {
		if err := svr.Start(); err != nil {
			t.Logf("Failed to start server: %v", err)
		}
	}()
	t.Cleanup(func() {
		defer cancel()
		svr.Shutdown(ctx)
	})
	// wait for server to actually start
	time.Sleep(100 * time.Millisecond)

	// assert the server is running and healthy
	c, err := client.New("http://localhost:9999")
	require.NoError(t, err)

	err = c.HealthCheck(ctx)
	require.NoError(t, err)

	didResp, err := c.RegisterDID(ctx, StorageNodeDID)
	require.NoError(t, err)

	require.NotEmpty(t, didResp.SessionID)
	sessionID := didResp.SessionID
	require.Equal(t, fmt.Sprintf("/api/v1/onboard/delegation/%s", sessionID), didResp.DelegationURL)

	require.False(t, svr.Store().IsProviderRegistered(StorageNodeDID))

	delgDwnld, err := c.DownloadDelegation(ctx, sessionID)
	require.NoError(t, err)

	session, err := svr.Store().GetSession(sessionID)
	require.NoError(t, err)

	require.Equal(t, session.DelegationData, string(delgDwnld))

	require.Equal(t, sessionID, session.SessionID)
	require.Equal(t, StorageNodeDID, session.DID)
	require.Equal(t, "did_verified", session.Status)
	require.Empty(t, session.FQDN)
	require.Empty(t, session.Proof)
	delg, err := delegation.ParseDelegationContent(session.DelegationData)
	require.NoError(t, err)
	require.Equal(t, StorageNodeDID, delg.Audience)
	require.Equal(t, IndexingServiceDID, delg.Issuer)
	require.Len(t, delg.Capabilities, 1)
	require.Equal(t, IndexingServiceDID, delg.Capabilities[0].With)
	require.Equal(t, claim.CacheAbility, delg.Capabilities[0].Can)

	sessionStatus, err := c.GetStatus(ctx, sessionID)
	require.NoError(t, err)
	require.Equal(t, "did_verified", sessionStatus.Status)
	require.Equal(t, StorageNodeDID, sessionStatus.DID)
	require.Equal(t, "register-fqdn", sessionStatus.NextStep)

	fakeStorageNodeServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte(fmt.Sprintf("ðŸ”¥ storage v0.0.3-d6f3761-dirty\n"+
			"- https://github.com/storacha/storage\n"+
			"- %s", StorageNodeDID)))
	}))

	fqdnResp, err := c.RegisterFQDN(ctx, sessionID, fakeStorageNodeServer.URL)
	require.NoError(t, err)
	require.Equal(t, sessionID, fqdnResp.SessionID)
	require.Equal(t, "fqdn_verified", fqdnResp.Status)
	require.Equal(t, fakeStorageNodeServer.URL, fqdnResp.FQDN)

	sessionStatus, err = c.GetStatus(ctx, sessionID)
	require.NoError(t, err)
	require.Equal(t, "fqdn_verified", sessionStatus.Status)
	require.Equal(t, StorageNodeDID, sessionStatus.DID)
	require.Equal(t, "register-proof", sessionStatus.NextStep)

	require.False(t, svr.Store().IsProviderRegistered(StorageNodeDID))

	strgDelegation := makeStorageDelegation(t, StorageNodeKey, UploadServiceDID)

	proofResp, err := c.RegisterProof(ctx, sessionID, strgDelegation)
	require.NoError(t, err)
	require.Equal(t, sessionID, proofResp.SessionID)
	require.Equal(t, "proof_verified", proofResp.Status)

	require.True(t, svr.Store().IsProviderRegistered(StorageNodeDID))

}

func makeStorageDelegation(t *testing.T, storageNodeKey string, uploadServiceDID string) string {
	strgSigner, err := ed25519.Parse(storageNodeKey)
	require.NoError(t, err)

	uploadDID, err := did.Parse(uploadServiceDID)
	require.NoError(t, err)

	d, err := ucandelegation.Delegate(
		strgSigner,
		uploadDID,
		[]ucan.Capability[ucan.NoCaveats]{
			ucan.NewCapability(
				blob.AllocateAbility,
				strgSigner.DID().String(),
				ucan.NoCaveats{},
			),
			ucan.NewCapability(
				blob.AcceptAbility,
				strgSigner.DID().String(),
				ucan.NoCaveats{},
			),
			ucan.NewCapability(
				pdp.InfoAbility,
				strgSigner.DID().String(),
				ucan.NoCaveats{},
			),
			ucan.NewCapability(
				replica.AllocateAbility,
				strgSigner.DID().String(),
				ucan.NoCaveats{},
			),
		},
		ucandelegation.WithNoExpiration(),
	)
	require.NoError(t, err)

	dBytes, err := io.ReadAll(d.Archive())
	require.NoError(t, err)
	out, err := delegation.FormatDelegation(dBytes)
	require.NoError(t, err)
	return out
}

func setupServer(t *testing.T) *server.Server {
	svr, err := server.New(&config.Config{
		Server: config.ServerConfig{
			Host:         "0.0.0.0",
			Port:         9999,
			ReadTimeout:  time.Minute,
			WriteTimeout: time.Minute,
		},
		Onboarding: config.OnboardingConfig{
			SessionTimeout:          time.Hour,
			DelegationTTL:           time.Hour,
			FQDNVerificationTimeout: time.Minute,
			MaxRetries:              1,
			IndexingServiceKey:      IndexingServiceKey,
			UploadServiceKey:        UploadServiceKey,
			AllowedDIDs:             []string{StorageNodeDID},
		},
	})
	require.NoError(t, err)
	return svr
}
